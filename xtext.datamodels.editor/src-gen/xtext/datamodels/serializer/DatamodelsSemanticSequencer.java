/*
 * generated by Xtext 2.15.0
 */
package xtext.datamodels.serializer;

import com.google.inject.Inject;
import datamodels.AssociationEnd;
import datamodels.Attribute;
import datamodels.DataModel;
import datamodels.DatamodelsPackage;
import datamodels.Entity;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import xtext.datamodels.services.DatamodelsGrammarAccess;

@SuppressWarnings("all")
public class DatamodelsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DatamodelsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DatamodelsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DatamodelsPackage.ASSOCIATION_END:
				sequence_AssociationEnd(context, (AssociationEnd) semanticObject); 
				return; 
			case DatamodelsPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case DatamodelsPackage.DATA_MODEL:
				sequence_DataModel(context, (DataModel) semanticObject); 
				return; 
			case DatamodelsPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Property returns AssociationEnd
	 *     AssociationEnd returns AssociationEnd
	 *
	 * Constraint:
	 *     (targetEntity=[Entity|EString] multiplicity=Multiplicity name=EString otherEnd=[AssociationEnd|EString] associationName=EString)
	 */
	protected void sequence_AssociationEnd(ISerializationContext context, AssociationEnd semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DatamodelsPackage.Literals.ASSOCIATION_END__TARGET_ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DatamodelsPackage.Literals.ASSOCIATION_END__TARGET_ENTITY));
			if (transientValues.isValueTransient(semanticObject, DatamodelsPackage.Literals.ASSOCIATION_END__MULTIPLICITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DatamodelsPackage.Literals.ASSOCIATION_END__MULTIPLICITY));
			if (transientValues.isValueTransient(semanticObject, DatamodelsPackage.Literals.PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DatamodelsPackage.Literals.PROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, DatamodelsPackage.Literals.ASSOCIATION_END__OTHER_END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DatamodelsPackage.Literals.ASSOCIATION_END__OTHER_END));
			if (transientValues.isValueTransient(semanticObject, DatamodelsPackage.Literals.ASSOCIATION_END__ASSOCIATION_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DatamodelsPackage.Literals.ASSOCIATION_END__ASSOCIATION_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssociationEndAccess().getTargetEntityEntityEStringParserRuleCall_1_0_1(), semanticObject.eGet(DatamodelsPackage.Literals.ASSOCIATION_END__TARGET_ENTITY, false));
		feeder.accept(grammarAccess.getAssociationEndAccess().getMultiplicityMultiplicityEnumRuleCall_2_0(), semanticObject.getMultiplicity());
		feeder.accept(grammarAccess.getAssociationEndAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAssociationEndAccess().getOtherEndAssociationEndEStringParserRuleCall_5_0_1(), semanticObject.eGet(DatamodelsPackage.Literals.ASSOCIATION_END__OTHER_END, false));
		feeder.accept(grammarAccess.getAssociationEndAccess().getAssociationNameEStringParserRuleCall_7_0(), semanticObject.getAssociationName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Attribute
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=EString isUnique?='unique'? type=DataType)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataModel returns DataModel
	 *
	 * Constraint:
	 *     (name=EString (entities+=Entity entities+=Entity*)?)
	 */
	protected void sequence_DataModel(ISerializationContext context, DataModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=EString superEntity=[Entity|EString]? (properties+=Property properties+=Property*)?)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
