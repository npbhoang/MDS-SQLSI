name: UniversitySecurity
roles: 
	Lecturer <- 
rules:
	readStudentInfo: 
		READ("University.RegUser.firstname", 
			"University.RegUser.lastname", 
			"University.RegUser.middlename", 
			"University.RegUser.email", 
			"University.Student.intake")
		conditions {
			{
				roles(Lecturer)
				context: "Any lecturer can read the info 
				of the students who attends his/her class."
				ocl: "caller.taughtCourses->exists(c|c.students->includes(self))"
				sql: ""
			},or 
			{
				roles(Student)
				context: "Any student can read info of other students who are classmates."
				ocl: ""
				sql: ""
			}
		}
	readStudentClassStatus:
		READ("University.Student.enrolledCourses","University.Course.students")
		conditions {
			{
				roles(Lecturer)
				context: "Any lecturer can read the enrollment status of any of its students"
				ocl: ""
				sql: ""
			},or 
			{
				roles(Student)
				context: "Any student can read their own enrollment status"
				ocl: ""
				sql: ""
			}
		}
	defaultReadBasicInformation:
		READ("University.RegUser.firstname", "University.RegUser.lastname", "University.RegUser.middlename", "University.RegUser.email")
		conditions {
			{
				roles(Student,Lecturer)
				context: "Any one can read their own basic information"
				ocl: ""
				sql: ""
			}
		}
	defaultReadLecturerInformation:
		READ("University.Lecturer.salary")
		conditions {
			{
				roles(Lecturer)
				context: "Any lecturer can read their own information"
				ocl: ""
				sql: ""
			}
		}
	defaultReadStudentInformation:
		READ("University.Student.intake")
		conditions {
			{
				roles(Student)
				context: "Any student can read their own basic information"
				ocl: ""
				sql: ""
			}
		}
	readCourseInfo:
		READ("University.Course.name", "University.Course.year")
		conditions {
			{
				roles(Student,Lecturer)
				context: "Any student can read their own basic information"
				ocl: ""
				sql: ""
			}
		}
	readLecturerTeachingScheme:
		READ("University.Lecturer.taughtCourses", "University.Course.lecturer")
		conditions {
			{
				roles(Lecturer)
				context: "Any lecturer can read any other lecturers' scheme."
				ocl: ""
				sql: ""
			}
		}
