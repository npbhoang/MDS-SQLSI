/*
 * generated by Xtext 2.15.0
 */
package xtext.datamodels.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import xtext.datamodels.ide.contentassist.antlr.internal.InternalDatamodelsParser;
import xtext.datamodels.services.DatamodelsGrammarAccess;

public class DatamodelsParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DatamodelsGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DatamodelsGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPropertyAccess().getAlternatives(), "rule__Property__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getMultiplicityAccess().getAlternatives(), "rule__Multiplicity__Alternatives");
			builder.put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
			builder.put(grammarAccess.getDataModelAccess().getGroup(), "rule__DataModel__Group__0");
			builder.put(grammarAccess.getDataModelAccess().getGroup_4(), "rule__DataModel__Group_4__0");
			builder.put(grammarAccess.getDataModelAccess().getGroup_4_1(), "rule__DataModel__Group_4_1__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_3(), "rule__Entity__Group_3__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_5(), "rule__Entity__Group_5__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_5_1(), "rule__Entity__Group_5_1__0");
			builder.put(grammarAccess.getAssociationEndAccess().getGroup(), "rule__AssociationEnd__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getDataModelAccess().getNameAssignment_2(), "rule__DataModel__NameAssignment_2");
			builder.put(grammarAccess.getDataModelAccess().getEntitiesAssignment_4_0(), "rule__DataModel__EntitiesAssignment_4_0");
			builder.put(grammarAccess.getDataModelAccess().getEntitiesAssignment_4_1_1(), "rule__DataModel__EntitiesAssignment_4_1_1");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_2(), "rule__Entity__NameAssignment_2");
			builder.put(grammarAccess.getEntityAccess().getSuperEntityAssignment_3_1(), "rule__Entity__SuperEntityAssignment_3_1");
			builder.put(grammarAccess.getEntityAccess().getPropertiesAssignment_5_0(), "rule__Entity__PropertiesAssignment_5_0");
			builder.put(grammarAccess.getEntityAccess().getPropertiesAssignment_5_1_1(), "rule__Entity__PropertiesAssignment_5_1_1");
			builder.put(grammarAccess.getAssociationEndAccess().getMultiplicityAssignment_1(), "rule__AssociationEnd__MultiplicityAssignment_1");
			builder.put(grammarAccess.getAssociationEndAccess().getTargetEntityAssignment_3(), "rule__AssociationEnd__TargetEntityAssignment_3");
			builder.put(grammarAccess.getAssociationEndAccess().getNameAssignment_5(), "rule__AssociationEnd__NameAssignment_5");
			builder.put(grammarAccess.getAssociationEndAccess().getOtherEndAssignment_7(), "rule__AssociationEnd__OtherEndAssignment_7");
			builder.put(grammarAccess.getAssociationEndAccess().getAssociationNameAssignment_9(), "rule__AssociationEnd__AssociationNameAssignment_9");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_2(), "rule__Attribute__NameAssignment_2");
			builder.put(grammarAccess.getAttributeAccess().getIsUniqueAssignment_4(), "rule__Attribute__IsUniqueAssignment_4");
			builder.put(grammarAccess.getAttributeAccess().getTypeAssignment_5(), "rule__Attribute__TypeAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DatamodelsGrammarAccess grammarAccess;

	@Override
	protected InternalDatamodelsParser createParser() {
		InternalDatamodelsParser result = new InternalDatamodelsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DatamodelsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DatamodelsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
