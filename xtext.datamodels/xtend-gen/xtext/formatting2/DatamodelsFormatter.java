/**
 * generated by Xtext 2.15.0
 */
package xtext.formatting2;

import com.google.inject.Inject;
import datamodels.DataModel;
import datamodels.Entity;
import datamodels.Property;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import xtext.services.DatamodelsGrammarAccess;

@SuppressWarnings("all")
public class DatamodelsFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DatamodelsGrammarAccess _datamodelsGrammarAccess;
  
  protected void _format(final DataModel dataModel, @Extension final IFormattableDocument document) {
    EList<Entity> _entities = dataModel.getEntities();
    for (final Entity entity : _entities) {
      document.<Entity>format(entity);
    }
  }
  
  protected void _format(final Entity entity, @Extension final IFormattableDocument document) {
    EList<Property> _properties = entity.getProperties();
    for (final Property property : _properties) {
      document.<Property>format(property);
    }
  }
  
  public void format(final Object dataModel, final IFormattableDocument document) {
    if (dataModel instanceof XtextResource) {
      _format((XtextResource)dataModel, document);
      return;
    } else if (dataModel instanceof DataModel) {
      _format((DataModel)dataModel, document);
      return;
    } else if (dataModel instanceof Entity) {
      _format((Entity)dataModel, document);
      return;
    } else if (dataModel instanceof EObject) {
      _format((EObject)dataModel, document);
      return;
    } else if (dataModel == null) {
      _format((Void)null, document);
      return;
    } else if (dataModel != null) {
      _format(dataModel, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(dataModel, document).toString());
    }
  }
}
