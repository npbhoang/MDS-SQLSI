/**
 * generated by Xtext 2.15.0
 */
package uam.mde20.sqlsi.xtext.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import securitymodels.Auth;
import securitymodels.ProtectedResource;
import securitymodels.Role;
import securitymodels.Rule;
import securitymodels.SecurityModel;
import uam.mde20.sqlsi.xtext.services.SecuritymodelsGrammarAccess;

@SuppressWarnings("all")
public class SecuritymodelsFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private SecuritymodelsGrammarAccess _securitymodelsGrammarAccess;
  
  protected void _format(final SecurityModel securityModel, @Extension final IFormattableDocument document) {
    EList<ProtectedResource> _resources = securityModel.getResources();
    for (final ProtectedResource protectedResource : _resources) {
      document.<ProtectedResource>format(protectedResource);
    }
    EList<Role> _roles = securityModel.getRoles();
    for (final Role role : _roles) {
      document.<Role>format(role);
    }
    EList<Rule> _rules = securityModel.getRules();
    for (final Rule rule : _rules) {
      document.<Rule>format(rule);
    }
  }
  
  protected void _format(final Rule rule, @Extension final IFormattableDocument document) {
    EList<Auth> _auths = rule.getAuths();
    for (final Auth auth : _auths) {
      document.<Auth>format(auth);
    }
  }
  
  public void format(final Object rule, final IFormattableDocument document) {
    if (rule instanceof XtextResource) {
      _format((XtextResource)rule, document);
      return;
    } else if (rule instanceof Rule) {
      _format((Rule)rule, document);
      return;
    } else if (rule instanceof SecurityModel) {
      _format((SecurityModel)rule, document);
      return;
    } else if (rule instanceof EObject) {
      _format((EObject)rule, document);
      return;
    } else if (rule == null) {
      _format((Void)null, document);
      return;
    } else if (rule != null) {
      _format(rule, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(rule, document).toString());
    }
  }
}
